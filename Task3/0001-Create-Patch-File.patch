From ebc7037246ed5d631e04218353b1ae70ef69ad5a Mon Sep 17 00:00:00 2001
From: Soham Samanta <sohamsamanta2@gmail.com>
Date: Thu, 21 Apr 2022 13:52:34 +0530
Subject: [PATCH] Create Patch File

---
 src/DataManipulator.ts | 70 +++++++++++++++++++++++++++++++++++-------
 src/Graph.tsx          | 67 ++++++++++++++++++++++++++++++++++------
 2 files changed, 117 insertions(+), 20 deletions(-)

diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..926cdde 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,68 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+      price_abc: number,
+      price_def: number,
+      ratio: number,
+      lower_bound: number,
+      upper_bound: number,
+      trigger_alert: number | undefined,
+      timestamp: Date
 }
 
+/* 
+● This change is necessary because it will be the structure of the return object of
+  the only function of the DataManipulator class, i.e. the generateRow function
+● It’s important that the return object corresponds to the the schema of the table
+  we’ll be updating in the Graph component because that’s the only way that we’ll
+  be able to display the right output we want. 
+● Finally, we have to update the generateRow function of the DataManipulator
+  class to properly process the raw server data passed to it so that it can return
+  the processed data which will be rendered by the Graph component’s table.
+● Here we can compute for price_abc and price_def properly (like what you did
+  back in task 1). Afterwards we can also compute for ratio using the two
+  computed prices, (like what you did in task 1 too). And, set lower and upper
+  bounds, as well as trigger_alert. To better understand this see the expected
+  change in the next slide
+*/
+
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+  static generateRow(serverResponds: ServerRespond[]): Row {
+        const priceABC = (serverResponds[0].top_ask.price + serverResponds[0].top_bid.price)/2;
+        const priceDEF = (serverResponds[1].top_ask.price + serverResponds[1].top_bid.price)/2;
+        const ratio = priceABC / priceDEF;
+        const upper_bound = 1 + 0.07;
+        const lower_bound = 1 - 0.07;
+        return {
+          price_abc: priceABC,
+          price_def: priceDEF,
+          ratio,
+          timestamp: serverResponds[0].timestamp > serverResponds[1].timestamp ? 
+            serverResponds[0].timestamp : serverResponds[1].timestamp,
+          upper_bound: upper_bound,
+          lower_bound: lower_bound,
+          trigger_alert: (ratio > upper_bound || ratio < lower_bound ) ? ratio : undefined,
       };
-    })
-  }
+    }
 }
+
+
+/*
+● Observe how we’re able to access serverRespond as an array where in the
+  first element (0-index) is about stock ABC and the second element (1-index) is
+  about stock DEF. With this, we were able to easily just plug in values to the
+  formulas we used back in task 1 to compute for prices and ratio properly
+● Also note how the return value is changed from an array of Row objects to just
+  a single Row object This change explains why we also adjusted the argument
+  we passed to table.update in Graph.tsx earlier so that consistency is
+  preserved.
+● The upper_bound and lower_bound are pretty much constant for any data
+  point. This is how we will be able to maintain them as steady upper and lower
+  lines in the graph. While 1.05 and 0.95 isn’t really +/-10% of the 12 month
+  historical average ratio (i.e. 1.1 and 0.99) you’re free to play around with the
+  values and see which has a more conservative alerting behavior.
+● The trigger_alert field is pretty much just a field that has a value (e.g. the ratio)
+  if the threshold is passed by the ratio. Otherwise if the ratio remains within the
+  threshold, then no value/undefined will suffice.
+*/
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..b85dd80 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,12 +23,25 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
+      lower_bound: 'float',
+      upper_bound: 'float',
+      trigger_alert: 'float',
       timestamp: 'date',
     };
 
+    /*
+    ● Since we don’t want to distinguish between two stocks now, but instead want to track their
+      ratios, we made sure to add the ratio field. Since we also wanted to track upper_bound,
+      lower_bound, and the moment when these bounds are crossed i.e. trigger_alert, we had to
+      add those fields too.
+    ● Finally, the reason we added price_abc and price_def is just because these were necessary
+       get the ratio as you will see later. We won’t be configuring the graph to show them anyway.
+    ● Of course since we’re tracking all of this with respect to time, timestamp is going to be there
+    */
+
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
@@ -36,25 +49,61 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      // elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
       elem.setAttribute('columns', '["top_ask_price"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
+        lower_bound: 'avg',
+        upper_bound: 'avg',
+        trigger_alert: 'avg',
         timestamp: 'distinct count',
       }));
     }
   }
 
+  /* 
+  ● ‘view’ is the the kind of graph we wanted to visualize the data as. Initially, this is
+    already set to y_line. This is the type of graph we want so we’re good here.
+  ● ‘column-pivots’ used to exist and was what allowed us to distinguish / split
+    stock ABC with DEF back in task 2. We removed this because we’re concerned
+    about the ratios between two stocks and not their separate prices
+  ● ‘row-pivots’ takes care of our x-axis. This allows us to map each datapoint
+    based on the timestamp it has. Without this, the x-axis is blank. So this field
+    and its value remains
+  ● ‘columns’ is what will allow us to only focus on a particular part of a datapoint’s
+    data along the y-axis. Without this, the graph will plot all the fields and values of
+    each datapoint and it will be a lot of noise. For this case, we want to track ratio,
+    lower_bound, upper_bound and trigger_alert.
+  ● ‘aggregates’ is what will allow us to handle the cases of duplicated data we
+    observed way back in task 2 and consolidate them as just one data point. In
+    our case we only want to consider a data point unique if it has a timestamp.
+    Otherwise, we will average out the all the values of the other non-unique fields
+    these ‘similar’ datapoints before treating them as one (e.g. ratio, price_abc, …)
+  */
+
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
 
+/* 
+● To fully achieve our goal in this task, we have to make some modifications in
+  the DataManipulator.ts file. This file will be responsible for processing the raw
+  stock data we’ve received from the server before it throws it back to the Graph
+  component’s table to render. Initially, it’s not really doing any processing hence
+  we were able to keep the status quo from the finished product in task 2
+● The first thing we have to modify in this file is the Row interface. If you notice,
+  the initial setting of the Row interface is almost the same as the old schema in
+  Graph.tsx before we updated it. So now, we have to update it to match the
+  new schema. See next slide to better visualize the change that’s supposed to
+  happen. 
+*/
+
 export default Graph;
-- 
2.35.1

